pipeline {
    agent any

    parameters {
        string(name: 'API_KEY', defaultValue: '', description: 'API key to access the API')
        string(name: 'name', defaultValue: '', description: 'Name of the client container')
        choice(name: 'ACTION', choices: ['start', 'stop', 'remove'], description: 'Action to perform on the container')
    }

    environment {
        WEB_API_URL = "http://192.168.56.1:3000/api/docker/updated"
    }

    stages {
        stage('Validate API Key') {
            steps {
                script {
                    if (!params.API_KEY) {
                        error("API key is required to start the pipeline.")
                    }
                }
            }
        }

        stage('Manage Container') {
            steps {
                script {
                    def containerID = sh(
                        script: "docker ps -a --filter 'name=${params.name}' --format '{{.ID}}'",
                        returnStdout: true
                    ).trim()

                    if (!containerID) {
                        error("No container found with the name: ${params.name}")
                    }

                    if (params.ACTION == 'stop') {
                        echo "Stopping container ${params.name}"
                        sh "docker stop ${containerID}"
                    } else if (params.ACTION == 'remove') {
                        echo "Removing container ${params.name}"
                        sh "docker rm -f ${containerID}"
                    } else if (params.ACTION == 'start') {
                        echo "Starting container ${params.name}"
                        sh "docker start ${containerID}"
                    } else {
                        error("Invalid action specified: ${params.ACTION}")
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def containerID = sh(
                    script: "docker ps --filter 'name=${params.name}' --format '{{.ID}}'",
                    returnStdout: true
                ).trim()

                def containerStatus = containerID ? "running" : "stopped"
                def jsonData = "{ \"containerId\": \"${containerID}\", \"status\": \"${containerStatus}\", \"containerName\": \"${params.name}\" }"

                sh "curl -X POST -H 'Content-Type: application/json' -H 'x-api-key: ${params.API_KEY}' -d '${jsonData}' ${WEB_API_URL}"
                echo "Container ${params.name} is now ${containerStatus}"
            }
        }
    }
}
