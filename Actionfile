pipeline {
    agent any

    parameters {
        string(name: 'API_KEY', defaultValue: '', description: 'API key to access the API')
        string(name: 'name', defaultValue: '', description: 'Name of the client container')
        string(name: 'containerId', defaultValue: '', description: 'ID of the WebApp container')
        choice(name: 'ACTION', choices: ['start', 'stop', 'remove'], description: 'Action to perform on the container stack')
    }

    environment {
        WEB_API_URL = "http://192.168.56.1:3000/api/docker/update-status"
    }

    stages {
        stage('Validate API Key') {
            steps {
                script {
                    if (!params.API_KEY?.trim()) {
                        error("API key is required to start the pipeline.")
                    }
                }
            }
        }

        stage('Validate Container ID') {
            steps {
                script {
                    if (!params.containerId?.trim()) {
                        error("Container ID is required to find the stack.")
                    }
                }
            }
        }

        stage('Find Pipeline Stack') {
            steps {
                script {
                    echo "Finding pipeline ID for any container with WebApp ID: ${params.containerId}"

                    // ✅ Ermittelt die Pipeline-ID aus einem der Container (WebApp, MariaDB, Redis)
                    def pipelineId = sh(
                        script: """
                        docker ps -a --format '{{.Names}}' | grep '${params.containerId}' | awk -F '_' '{print \$1}'
                        """,
                        returnStdout: true
                    ).trim()

                    if (!pipelineId) {
                        error("No pipeline ID found for container ID: ${params.containerId}")
                    }

                    echo "Detected pipeline: ${pipelineId}"

                    // ✅ Alle Container der Pipeline finden (egal ob WebApp, MariaDB oder Redis)
                    def stackContainersOutput = sh(
                        script: """
                        docker ps -a --format '{{.ID}} {{.Names}}' | grep '${pipelineId}_' | awk '{print \$2}'
                        """,
                        returnStdout: true
                    ).trim()

                    if (!stackContainersOutput) {
                        error("No stack containers found for pipeline: ${pipelineId}")
                    }

                    def stackContainers = stackContainersOutput.split("\n")

                    echo "Stack containers found: ${stackContainers.join(', ')}"
                    env.STACK_CONTAINERS = stackContainers.join(' ')
                    env.PIPELINE_ID = pipelineId
                }
            }
        }

        stage('Manage Pipeline Stack') {
            steps {
                script {
                    if (!env.STACK_CONTAINERS?.trim()) {
                        error("No containers to manage for pipeline: ${env.PIPELINE_ID}")
                    }

                    echo "Executing ${params.ACTION} on: ${env.STACK_CONTAINERS}"

                    def actionCommand = ""

                    if (params.ACTION == 'stop') {
                        echo "Stopping all containers in pipeline: ${env.PIPELINE_ID}"
                        actionCommand = "docker stop \$(docker ps -q --filter 'name=${env.PIPELINE_ID}_')"
                    } else if (params.ACTION == 'remove') {
                        echo "Removing all containers in pipeline: ${env.PIPELINE_ID}"
                        actionCommand = "docker rm -f \$(docker ps -aq --filter 'name=${env.PIPELINE_ID}_')"
                    } else if (params.ACTION == 'start') {
                        echo "Starting all containers in pipeline: ${env.PIPELINE_ID}"
                        actionCommand = "docker start \$(docker ps -aq --filter 'name=${env.PIPELINE_ID}_')"
                    } else {
                        error("Invalid action specified: ${params.ACTION}")
                    }

                    sh actionCommand
                }
            }
        }
    }

    post {
        always {
            script {
                def isDeleted = params.ACTION == 'remove'

                def stackStatus = isDeleted ? "deleted" : (
                    sh(
                        script: "docker ps --filter 'name=${env.PIPELINE_ID}_' --format '{{.ID}}'",
                        returnStdout: true
                    ).trim() ? "running" : "stopped"
                )

                def jsonData = "{ \"containerId\": \"${params.containerId}\", \"status\": \"${stackStatus}\", \"containerName\": \"${params.name}\" }"

                sh "curl -X POST -H 'Content-Type: application/json' -H 'x-api-key: ${params.API_KEY}' -d '${jsonData}' ${WEB_API_URL}"
                echo "Pipeline stack ${params.name} is now ${stackStatus}"
            }
        }
    }
}
